.syntax--comment {
    color: @theme-color--comment;
}

.syntax--storage {
    &.syntax--modifier,
    &.syntax--type {
        color: @theme-color--storage;
    }
}

.syntax--invalid.syntax--illegal {
    background-color: @theme-color--error;
    color           : @syntax-bg;
}

.syntax--none {
    color           : @syntax-bg;
    background-color: @syntax-fg;
}

.syntax--string {
    color: @theme-color--string;

    &.syntax--unquoted {
        // color: @theme-color--string;
    }

    &.syntax--regexp {
        color: @light-red;

        .syntax--source.syntax--ruby.syntax--embedded {
            color: @orange;
        }
    }

    &.syntax--other.syntax--link {
        color: @orange;
    }

    .syntax--embedded.syntax--punctuation {
        color: @theme-color--storage;
    }

    .syntax--entity.syntax--name.syntax--function {
        color: @light-yellow; // HACK: for atom command registration
    }
}

.syntax--variable {
    color: @syntax-color-variable;

    &.syntax--interpolation {
        color: @light-blue;
    }

    &.syntax--parameter.syntax--function {
        color: @light-blue;
    }

    &.syntax--language {
        color: @dark-blue;
        &.syntax--import-all,
        &.syntax--this,
        // &.syntax--arguments,
        &.syntax--prototype,
        &.syntax--super {
            color: @dark-blue;
        }
    }

    &.syntax--object {
        color: @light-blue;
    }

    &.syntax--other {
        &.syntax--property {
            // color: @very-light-gray;
        }
        &.syntax--class {
            color: @theme-color--class;
        }
    }
}

.syntax--constant {
    color: @syntax-color-variable;

    &.syntax--character {
        // &.syntax--entity,
        &.syntax--escape {
            color: @light-blue;
        }
    }

    &.syntax--numeric {
        color: @puke;
    }

    &.syntax--boolean {
        color: @dark-blue;
    }

    &.syntax--other {
        &.syntax--color {}
        // &.syntax--object {
        //   &.syntax--key,
        //   &.syntax--key .syntax--string {
        //     color: @light-blue; // TODO: identifier for keys
        //   }
        // }
        &.syntax--rgb-value {
            color: @orange;
        }

        &.syntax--symbol {
            // color: @light-blue;
        }
    }

    &.syntax--language {
        color: @dark-blue;

        &.syntax--null,
        &.syntax--undefined {
            color: @dark-blue;
        }
    }
}

.syntax--support {
    // &.syntax--variable,
    &.syntax--variable {
        color: @seafoam-green;
        &.syntax--property.syntax--dom {
            color: @light-blue;
        }
    }
    &.syntax--class {
        color: @seafoam-green;
    }

    &.syntax--builtin,
    &.syntax--math {
        color: @seafoam-green;
    }

    &.syntax--function {
        color: @light-yellow;

        &.syntax--mutator {
            color: @light-blue;
        }

        &.syntax--any-method {
            color: @pink;
        }

        &.syntax--console {}
    }

    &.syntax--type {
        &.syntax--object {
            &.syntax--module,
            &.syntax--console,
            &.syntax--dom {
            // &.syntax--process {
                color: @seafoam-green; // NOTE: Babel
            }
            &.syntax--process {
                color: @light-blue;
            }
        }
    }

    &.syntax--dom {
        &.syntax--function {
            // color: @light-blue;
        }
        &.syntax--variable {
            // color: @seafoam-green;
            &.syntax--property {
                // color: @very-light-gray;
            }
        }
    }
}

.syntax--keyword {
    // color: @seafoam-green;
    &.syntax--control {
        color: @pink;

        &.syntax--elements {
            color: @pink;
        }

        &.syntax--module {
            color: @very-light-gray; // NOTE: import, export, from, default in JavaScript
        }

        &.syntax--conditional {}
    }

    &.syntax--operator {
        color: @very-light-gray;

        .syntax--punctuation {}

        &.syntax--module {
            &.syntax--all {
                color: @light-blue; // TODO: this in vanilla
            }
        }

        &.syntax--new,
        &.syntax--null,
        &.syntax--spread,
        &.syntax--this,
        &.syntax--undefined {
            color: @dark-blue; // TODO: define new in Babel/JSX
        }

        &.syntax--accessor,
        &.syntax--arithmetic,
        &.syntax--assignment,
        &.syntax--comparison,
        &.syntax--decrement,
        &.syntax--increment,
        &.syntax--of,
        &.syntax--relational,
        &.syntax--ternary {
            color: @very-light-gray;
        }
    }

    &.syntax--other {
        &.syntax--special-method {
            // color: @seafoam-green;
        }

        &.syntax--unit {
            // color: @puke;
        }

        &.syntax--important {
            color: @dark-blue;
        }
    }
}

.syntax--entity {
    &.syntax--name {
        &.syntax--function {
            color: @light-yellow;

            &.syntax--method {
                color: @light-yellow;
            }

            &.syntax--constructor {
                color: @light-blue;
            }
        }

        &.syntax--type {
            color: @seafoam-green; // NOTE: console, regexp

            &.syntax--instance {
                // color: @light-blue;
            }
        }

        &.syntax--tag {
            color: @dark-blue;
        }
    }

    &.syntax--other {
        &.syntax--inherited-class {
            color: @theme-color--class;
        }

        &.syntax--attribute-name {
            &.syntax--pseudo-element {
                // color: ;
            }

            &.syntax--attribute {
                color: @very-light-gray;
            }
        }
    }

    &.syntax--name.syntax--class,
    &.syntax--name.syntax--type.syntax--class {
        color: @theme-color--class; // NOTE: Babel Classes/Types
    }
}

.syntax--meta {
    &.syntax--definition,
    &.syntax--separator {
        color: @very-light-gray; // &.syntax--variable {color: ;}
    }

    &.syntax--class.syntax--body {
        &.syntax--function.syntax--method {
            .syntax--function {
                // color: @dark-blue;
            }
        }
    }

    &.syntax--arguments {
        .syntax--keyword.syntax--operator {
            color: @very-light-gray;
        }
    }

    &.syntax--delimiter {
        color: @very-light-gray;
    }

    &.syntax--function {
        &.syntax--method {
            // color: @light-blue;
        }

        &.syntax--parameters {
            color: @light-blue;

            .syntax--variable.syntax--other.syntax--readwrite.syntax--js {
                // font-style: italic;
            }
        }

        &.syntax--arguments {
            // color: @light-blue;
            // font-style: italic;
        }

        &.syntax--method {
            &.syntax--entity.syntax--name.syntax--function {
                // color: @light-blue;
            }
        }
        // &.syntax--arrow {
        //     .syntax--entity.syntax--name.syntax--function {
        //         color: @light-yellow;
        //     }
        // }
    }

    &.syntax--link {}

    &.syntax--for {
        .syntax--keyword.syntax--operator {
            color: @very-light-gray;
        }
    }

    &.syntax--selector {
        // color: @very-light-gray;
        // color: @light-blue;
        // color: @dark-yellow;
    }

    &.syntax--brace {
        &.syntax--curly,
        &.syntax--round,
        &.syntax--square {
            color: @very-light-gray; // NOTE: brackets
        }
    }

    &.syntax--method-call {
        .syntax--entity {
            // color: @light-blue;
        }
    }

    &.syntax--function-call {
        .syntax--entity.syntax--function.syntax--name {
            // color: @light-blue;

            &.syntax--without-arguments {
                // color: @dark-blue;
            }
        }
    }

    &.syntax--require {
        // color: @light-yellow !important; // NOTE: 'require' for Babel
    }
}

.syntax--punctuation {
    &.syntax--definition {
        &.syntax--comment {
            color: @comment-green;
        }

        &.syntax--parameters {
            color: @very-light-gray;
        }

        &.syntax--modules {
            color: @very-light-gray;

            &.syntax--begin,
            &.syntax--end {
                // FIXME: redundant? other things in 'syntax--module'?
                color: @very-light-gray
            }
        }

        &.syntax--tag {
            color: @light-gray;
        }

        &.syntax--keyword {
            color: @pink;
        }

        &.syntax--string {
            color: @orange;
        }

        &.syntax--variable {
            &.syntax--begin,
            &.syntax--end {
                color: @very-light-gray; // NOTE: ()s & ''/""/``s
            }
        }

        &.syntax--array,
        &.syntax--function-parameters,
        &.syntax--method-parameters,
        &.syntax--parameters,
        &.syntax--separator,
        &.syntax--seperator {
            // color: @tag_gray;
            colod: @very-light-gray;
        }

        &.syntax--heading,
        &.syntax--identity {
            color: @very-light-gray;
        }

        &.syntax--bold {
            font-weight: bold;
        }

        &.syntax--italic {
            font-style: italic;
        }

        &.syntax--entity {
            color: @very-light-gray;
        }
    }

    &.syntax--section {
        &.syntax--array {
            color: @very-light-gray;
        }

        .syntax--string &.syntax--embedded.syntax--punctuation {
            // color: @dark-blue;
        }

        &.syntax--class {
            // color: @seafoam-green; // TODO: class-body
        }

        &.syntax--scope {
            &.syntax--begin,
            &.syntax--end {
                // color: @dark-blue; // NOTE: ()s & ''/""/``s
                color: @very-light-gray; // NOTE: ()s & ''/""/``s
            }
        }

        &.syntax--string.syntax--template {
            &.syntax--begin,
            &.syntax--end {
                // color: @very-light-gray; // NOTE: ()s & ''/""/``s
            }

            &.syntax--class,
            &.syntax--inner-class,
            &.syntax--method {
                // color: @very-light-gray;  //  Class Brackets
            }
        }
    }

    &.syntax--separator {
        &.syntax--key-value {
            color: @very-light-gray;
        }
    }

    &.syntax--terminator {
        color: @very-light-gray;
    }
}

.syntax--string.syntax--regexp {
    .syntax--punctuation.syntax--definition.syntax--string.syntax--begin,
    .syntax--punctuation.syntax--definition.syntax--string.syntax--end {
        color: @light-red;
    }
}

.syntax--markup {
    &.syntax--italic {
        // color     : @light-blue;
        font-style: italic;
    }

    &.syntax--bold {
        // color      : @dark-blue;
        font-weight: bold;
    }

    &.syntax--strike {
        color          : @light-gray;
        text-decoration: line-through;
    }

    &.syntax--changed {
        color: @seafoam-green;
    }

    &.syntax--deleted {
        color: @light-red;
    }

    &.syntax--heading {
        color: @dark-blue; // TODO: tweaked comment this out

        .syntax--punctuation {
            color: @dark-blue;
        }
    }

    &.syntax--inserted {
        color: @puke;
    }

    &.syntax--quote {
        .syntax--punctuation {
            color: @comment-green;
        }
    }

    &.syntax--link {
        .syntax--destination {
            // text-decoration: underline;
        }

        .syntax--punctuation {
            color: @very-light-gray;
        }
    }

    &.syntax--raw {
        color: @orange;

        .syntax--punctuation {
            color: @orange;
        }
    }
}

///* ========================================================================== */
// FIXME

.syntax--meta.syntax--function-call {
    .syntax--support.syntax--function {
        color: @light-yellow;
    }
}

.syntax--meta.syntax--method-call {
    .syntax--entity.syntax--name.syntax--function {
        // text-decoration: underline;
    }
}
