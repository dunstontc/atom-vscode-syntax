atom-text-editor {
    .syntax--source.syntax--js {
        color: @light-blue;  // FIXME: variables aren't correctly targeted.
    }
    .syntax--js,
    .syntax--source.syntax--js {
        .syntax--keyword.syntax--operator {
          // color: ; // NOTE: =, /, <, >, ++,
        }
        .syntax--operator {}

        &.syntax--entity {
            &.syntax--bracket.syntax--curly,
            &.syntax--delimiter.syntax--object.syntax--comma,
            &.syntax--punctuation.syntax--begin,
            &.syntax--punctuation.syntax--end {
                color: @dark-blue; // NOTE: ${}
            }
            .syntax--json{
              .syntax--function.syntax--name {
                  color: @light-yellow;
              }
            }
        }

        .syntax--keyword {
            &.syntax--delete,
            &.syntax--for,
            &.syntax--in,
            &.syntax--instanceof,
            &.syntax--typeof,
            &.syntax--void {
                // color: ;
            }

            &.syntax--of {
                color: @very-light-gray;
            }
            &.syntax--new {
                color: @dark-blue;
            }
        }

        .syntax--variable {
            &.syntax--language {
                // color: @light-blue; // NOTE: this $$$:
                &.syntax--import-all {
                  color: @light-blue;
                }
            }

            &.syntax--other {
              &.syntax--property {
                  // color: @very-light-gray; // NOTE: Property in JavaScript
              }
            }

            &.syntax--default {
                color: @pink;
            }
        }

        .syntax--meta {
            // Note: JavaScript & Babel operator scoping. META EXAMPLE

            &.syntax--export,
            &.syntax--import {
                .syntax--keyword {
                    color: @very-light-gray;
                }
            }
            &.syntax--for {
              .syntax--keyword.syntax--operator {
                color: @very-light-gray;
              }
            }

            &.syntax--class {
                // NOTE: brackets
                // color: @seafoam-green;
            }

            &.syntax--arguments {
              // color: @light-blue;
              .syntax--keyword.syntax--operator {
                // color: @very-light-gray;
              }
              .syntax--string {
                &.syntax--quoted.syntax--single,
                &.syntax--quoted.syntax--double {
                  color: @orange;
                }
              }
              .syntax--bracket {
                color: @very-light-gray;
              }
            }
        }

        &.syntax--punctuation {
            // color: ; // NOTE: ${} # . &
            &.syntax--definition {
                &.syntax--bracket.syntax--curly {
                    color: @very-light-gray;
                }

                &.syntax--brace {
                    &.syntax--round,
                    &.syntax--square {
                        color: @very-light-gray;
                    }

                    &.syntax--delimiter,
                    &.syntax--punctuation.syntax--begin,
                    &.syntax--punctuation.syntax--end {
                        // color: maroon; // NOTE: ${}
                    }
                }
            }
        }

        .syntax--variable {
            // color: @light-blue;  // NOTE: Variables, regex interpolation, (uquoted strings?)
            .syntax--parameter {
                // color: @light-blue;
                // QUESTION: define
            }
        }
    .syntax--keyword .syntax--operator .syntax--module .syntax--all{
       color: @light-blue;
    }
  }
}

.syntax--string.syntax--quoted.syntax--template {
  .syntax--begin,
  .syntax--end {
    color: @dark-blue;
  }
}
